import torch
import numpy as np
from pathlib import Path
import json
import tempfile
import traceback

from src.SSL_BrepNet.dataset_loader import BRepData
from src.SSL_BrepNet.normlization import BrepNetStandardizer
from src.SSL_BrepNet.model.encoder import CustomBRepEncoder
from src.SSL_BrepNet.model.decoder import ConditionalDecoder

def test_ssl_encoder() -> bool:
    """–¢–µ—Å—Ç SSL —ç–Ω–∫–æ–¥–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
    try:
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL —ç–Ω–∫–æ–¥–µ—Ä–∞...")
        
        encoder = CustomBRepEncoder(
            v_in_width=3,
            e_in_width=2, 
            f_in_width=5,  
            out_width=64,
            num_layers=1,
            use_attention=False
        )
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
        num_vertices = 4
        num_edges = 6
        num_faces = 3
        
        brep_data = BRepData(
            vertices=torch.randn(num_vertices, 3),
            edges=torch.randn(num_edges, 2),
            faces=torch.randn(num_faces, 5),
            # –†—ë–±—Ä–∞ —Å–æ–µ–¥–∏–Ω—è—é—Ç –≤–µ—Ä—à–∏–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [0, num_vertices)
            edge_to_vertex=torch.tensor([
                [0, 1, 2, 0, 1, 2],  # src vertices
                [1, 2, 3, 3, 0, 1]   # dst vertices  
            ], dtype=torch.long),
            # –ì—Ä–∞–Ω–∏ —Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —Å —Ä—ë–±—Ä–∞–º–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [0, num_edges)
            face_to_edge=torch.tensor([
                [0, 0, 1, 1, 2, 2],  # face indices (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö num_faces)
                [0, 1, 2, 3, 4, 5]   # edge indices (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö num_edges)
            ], dtype=torch.long),
            # –ì—Ä–∞–Ω–∏ —Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —Å –≥—Ä–∞–Ω—è–º–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [0, num_faces)
            face_to_face=torch.tensor([
                [0, 1, 2],  # src faces
                [1, 2, 0]   # dst faces
            ], dtype=torch.long)
        )
        
        # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
        with torch.no_grad():
            output = encoder(brep_data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert output.shape == (num_faces, 64), f"–û–∂–∏–¥–∞–ª–∏ ({num_faces}, 64), –ø–æ–ª—É—á–∏–ª–∏ {output.shape}"
        assert not torch.isnan(output).any(), "–≠–Ω–∫–æ–¥–µ—Ä –≤—ã–¥–∞–µ—Ç NaN"
        assert not torch.isinf(output).any(), "–≠–Ω–∫–æ–¥–µ—Ä –≤—ã–¥–∞–µ—Ç Inf"
        
        print("‚úÖ SSL —ç–Ω–∫–æ–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ SSL —ç–Ω–∫–æ–¥–µ—Ä–µ: {e}")
        traceback.print_exc()
        return False

def test_ssl_decoder() -> bool:
    """–¢–µ—Å—Ç SSL –¥–µ–∫–æ–¥–µ—Ä–∞"""
    try:
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL –¥–µ–∫–æ–¥–µ—Ä–∞...")
        
        decoder = ConditionalDecoder(
            latent_size=64,
            hidden_dims=[128, 128, 64],
            uv_input_dim=2,
            output_dim=4
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        uv_coords = torch.randn(100, 2)
        latent_vector = torch.randn(64)
        
        # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
        with torch.no_grad():
            output = decoder(uv_coords, latent_vector)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert output.shape == (100, 4), f"–û–∂–∏–¥–∞–ª–∏ (100, 4), –ø–æ–ª—É—á–∏–ª–∏ {output.shape}"
        assert not torch.isnan(output).any(), "–î–µ–∫–æ–¥–µ—Ä –≤—ã–¥–∞–µ—Ç NaN"
        
        print("‚úÖ SSL –¥–µ–∫–æ–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ SSL –¥–µ–∫–æ–¥–µ—Ä–µ: {e}")
        traceback.print_exc()
        return False

def test_standardizer() -> bool:
    """–¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ç–æ—Ä–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            "feature_standardization": {
                "face_features": [
                    {"mean": 0.5, "standard_deviation": 1.2},
                    {"mean": -0.3, "standard_deviation": 0.8},
                    {"mean": 1.1, "standard_deviation": 2.1}
                ],
                "edge_features": [
                    {"mean": 0.2, "standard_deviation": 0.9},
                    {"mean": -0.1, "standard_deviation": 1.5}
                ],
                "coedge_features": [
                    {"mean": 0.0, "standard_deviation": 1.0}
                ]
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = Path(tempfile.mkdtemp())
        stats_path = temp_dir / "stats.json"
        with open(stats_path, 'w') as f:
            json.dump(stats, f)
        
        standardizer = BrepNetStandardizer(str(stats_path))
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'face_features': np.random.randn(5, 3),
            'edge_features': np.random.randn(8, 2),
            'coedge_features': np.random.randn(10, 1)
        }
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è
        standardized = standardizer.standardize_data(test_data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert standardized['face_features'].shape == (5, 3)
        assert standardized['edge_features'].shape == (8, 2)
        
        print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        shutil.rmtree(temp_dir)
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ç–æ—Ä–µ: {e}")
        traceback.print_exc()
        return False

def test_pooling() -> bool:
    """–¢–µ—Å—Ç –ø—É–ª–∏–Ω–≥–∞ —Ä—ë–±–µ—Ä –Ω–∞ –≥—Ä–∞–Ω–∏"""
    try:
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∏–Ω–≥–∞ —Ä—ë–±–µ—Ä...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–∞–∫ –≤—ã—à–µ)
        stats = {
            "feature_standardization": {
                "face_features": [{"mean": 0.0, "standard_deviation": 1.0}] * 3,
                "edge_features": [{"mean": 0.0, "standard_deviation": 1.0}] * 2,
                "coedge_features": [{"mean": 0.0, "standard_deviation": 1.0}]
            }
        }
        
        temp_dir = Path(tempfile.mkdtemp())
        stats_path = temp_dir / "stats.json"
        with open(stats_path, 'w') as f:
            json.dump(stats, f)
        
        standardizer = BrepNetStandardizer(str(stats_path))
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = {
            'face_features': np.random.randn(3, 3),  # 3 –≥—Ä–∞–Ω–∏
            'edge_features': np.random.randn(5, 2),  # 5 —Ä—ë–±–µ—Ä
            'face': np.array([0, 0, 1, 1, 2]),       # coedge->face
            'edge': np.array([0, 1, 2, 3, 4])        # coedge->edge
        }
        
        # –ü—É–ª–∏–Ω–≥
        pooled = standardizer.pool_edge_data_onto_faces(data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        expected_shape = (3, 5)  # 3 face + 2 edge = 5
        assert pooled.shape == expected_shape, f"–û–∂–∏–¥–∞–ª–∏ {expected_shape}, –ø–æ–ª—É—á–∏–ª–∏ {pooled.shape}"
        
        print("‚úÖ –ü—É–ª–∏–Ω–≥ —Ä—ë–±–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        shutil.rmtree(temp_dir)
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—É–ª–∏–Ω–≥–µ: {e}")
        traceback.print_exc()
        return False

def test_integration() -> bool:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    try:
        print("üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç...")
        
        # –≠–Ω–∫–æ–¥–µ—Ä –∏ –¥–µ–∫–æ–¥–µ—Ä
        encoder = CustomBRepEncoder(3, 2, 5, 64, 1)
        decoder = ConditionalDecoder(64, [128, 64])
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        num_vertices = 4
        num_edges = 5  
        num_faces = 3
        
        brep_data = BRepData(
            vertices=torch.randn(num_vertices, 3),
            edges=torch.randn(num_edges, 2), 
            faces=torch.randn(num_faces, 5),
            # –í–∞–ª–∏–¥–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è edge_to_vertex
            edge_to_vertex=torch.tensor([
                [0, 1, 2, 3, 0],  # src: –≤—Å–µ < num_vertices
                [1, 2, 3, 0, 1]   # dst: –≤—Å–µ < num_vertices
            ], dtype=torch.long),
            # –í–∞–ª–∏–¥–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è face_to_edge
            face_to_edge=torch.tensor([
                [0, 0, 1, 1, 2],  # face: –≤—Å–µ < num_faces
                [0, 1, 2, 3, 4]   # edge: –≤—Å–µ < num_edges
            ], dtype=torch.long),
            # –í–∞–ª–∏–¥–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è face_to_face
            face_to_face=torch.tensor([
                [0, 1],  # src: –≤—Å–µ < num_faces
                [1, 2]   # dst: –≤—Å–µ < num_faces
            ], dtype=torch.long)
        )
        
        with torch.no_grad():
            # –≠–Ω–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            face_embeddings = encoder(brep_data)
            model_embedding = face_embeddings.mean(dim=0)
            
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            uv_coords = torch.rand(50, 2)
            reconstructed = decoder(uv_coords, model_embedding)
        
        assert reconstructed.shape == (50, 4)
        assert not torch.isnan(reconstructed).any()
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False
def create_valid_brep_data(num_vertices: int, num_edges: int, num_faces: int) -> BRepData:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö BRepData —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
    """
    return BRepData(
        vertices=torch.randn(num_vertices, 3),
        edges=torch.randn(num_edges, 2),
        faces=torch.randn(num_faces, 5),
        
        # edge_to_vertex: –∫–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ —Å–æ–µ–¥–∏–Ω—è–µ—Ç 2 –≤–µ—Ä—à–∏–Ω—ã
        edge_to_vertex=torch.stack([
            torch.randint(0, num_vertices, (num_edges,)),  # src vertices
            torch.randint(0, num_vertices, (num_edges,))   # dst vertices
        ]),
        
        # face_to_edge: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥—Ä–∞–Ω–∏ —Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ä—ë–±—Ä–∞–º–∏
        face_to_edge=torch.stack([
            torch.randint(0, num_faces, (min(num_faces * 3, 20),)),  # face indices
            torch.randint(0, num_edges, (min(num_faces * 3, 20),))   # edge indices
        ]),
        
        # face_to_face: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥—Ä–∞–Ω–∏ —Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä–∞–Ω—è–º–∏  
        face_to_face=torch.stack([
            torch.randint(0, num_faces, (min(num_faces * 2, 10),)),  # src faces
            torch.randint(0, num_faces, (min(num_faces * 2, 10),))   # dst faces
        ])
    )

def run_corrected_tests() -> None:
    """–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ SSL –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...\n")
    
    # –¢–µ—Å—Ç —ç–Ω–∫–æ–¥–µ—Ä–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL —ç–Ω–∫–æ–¥–µ—Ä–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)...")
    try:
        encoder = CustomBRepEncoder(3, 2, 5, 64, 1, False)
        brep_data = create_valid_brep_data(num_vertices=6, num_edges=8, num_faces=4)
        
        with torch.no_grad():
            output = encoder(brep_data)
        
        assert output.shape == (4, 64)
        print("‚úÖ SSL —ç–Ω–∫–æ–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ SSL —ç–Ω–∫–æ–¥–µ—Ä–µ: {e}")
        traceback.print_exc()
    
    print()
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)...")
    try:
        encoder = CustomBRepEncoder(3, 2, 5, 64, 1)
        decoder = ConditionalDecoder(64, [128, 64])
        brep_data = create_valid_brep_data(num_vertices=5, num_edges=7, num_faces=3)
        
        with torch.no_grad():
            face_embeddings = encoder(brep_data)
            model_embedding = face_embeddings.mean(dim=0)
            
            uv_coords = torch.rand(50, 2)
            reconstructed = decoder(uv_coords, model_embedding)
        
        assert reconstructed.shape == (50, 4)
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
    
    print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

def run_all_tests() -> None:
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ SSL –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...\n")
    
    tests = [
        test_ssl_encoder,
        test_ssl_decoder, 
        test_standardizer,
        test_pooling,
        test_integration
    ]
    
    results = []
    for test_func in tests:
        success = test_func()
        results.append(success)
        print()
    
    # –ò—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_all_tests()
run_corrected_tests()
